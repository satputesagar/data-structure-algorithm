quick sort is a divede and conquer algorithm. it picks an element as pivot and partitions the given array around the picks pivot.
there are many different versions of quicksort that pick pivot  in different ways.
1. Always pick first element as pivot.
2. Always pick last element as pivot (implemented below).
3.pick a random element as pivot.
4.pick median as pivot.

The key process in quickSort is partition().Target of partition is given an array and an element x of array as pivot , put x at its correct position in sorted array and 
put all smaller elements(smaller than x ) before x, and put all greater elements (greater than x) after x.
All this should be done in linear time.

Pseudo code for recursive Quick Sort funtion:

Low --> starting index , high -->ending index quick sort(arr[],low ,high)
quickSort(arr[],low,high)
{
    if(low <high)
    {
        // pi is partitioning index, arr[pi] is now at right place
        pi =partition(arr,low,higt);
        quicksort(arr,low,pi-1);//before pi
        quicksort(arr,pi+1,high); //after pi
    }
}




Pseudo code for partition()


    // this functon take last element as pivot, places the pivot element at its correct position in sorted array, and places all smaller (smaller than pivot)
    to  left  of pivot and all greater elements of right of pivot


    partition(arr[],low,high)
    {
        // pivot (Element to be placed at right position)
        pivot =arr[high];

        i = (low -1); //index of smaller element and indical 
        //right position of  pivot found so far.
         
         for(j =low;j<high-1;j++)
         {
             //if current element is smaller than the pivot
             if(arr[j]<pivot)
             {
                 i++;//increment index of smaller element swaping arr[i] and arr[j]
             }
         }
swap ar[i+1] and arr[high])
return (i+1)
}


